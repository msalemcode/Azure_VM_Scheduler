
param (

    [Parameter(Mandatory=$true)] 
    [String] $ResourceGroupName,
        
    [Parameter(Mandatory=$true)]
    [String] $AzureSubscriptionId,

    [Parameter(Mandatory=$true)]
    [String] $VmList

)

$conn = Get-AutomationConnection -Name 'AzureRunAsConnection'


# Returns strings with status messages
[OutputType([String])]

$null =Add-AzureRmAccount -ServicePrincipal  -TenantId $conn.TenantId -ApplicationId $conn.ApplicationId -CertificateThumbprint $conn.CertificateThumbprint  

$null = Select-AzureRmSubscription -SubscriptionId $AzureSubscriptionId

# If there is a specific resource group, then get all VMs in the resource group,
# otherwise get all VMs in the subscription.
if ($ResourceGroupName) 
{ 
    Write-Output($ResourceGroupName)
    Write-Output($AzureSubscriptionId)
    if($VmList -eq '*')
    {
        $VMs = Get-AzureRmVM -ResourceGroupName $ResourceGroupName 

        foreach ($VM in $VMs)
        {
            Write-Output($VM.Name)
            $btn=Stop-AzureRmVM  -ResourceGroupName $ResourceGroupName -Name $VM.Name -Force   
            if ($btn.StatusCode -ne 'OK')
            {
                # The VM failed to start, so send notice
                Write-Output ($VM.Name+ " failed to stop")
            }
            else
            {
                # The VM stopped, so send notice
                Write-Output ($VM.Name + " has been stopped")
            }

        }


    }
    else
    {
        $VMs = $VmList.split(",")
            # Start each of the VMs
        foreach ($VM in $VMs)
        {
            Write-Output($VM)
            $btn=Stop-AzureRmVM  -ResourceGroupName $ResourceGroupName -Name $VM -Force   
            if ($btn.StatusCode -ne 'OK')
            {
                # The VM failed to start, so send notice
                Write-Output ($VM+ " failed to stop")
            }
            else
            {
                # The VM stopped, so send notice
                Write-Output ($VM + " has been stopped")
            }

        }
    }

}


